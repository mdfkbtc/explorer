extends layout

block content   
  style.
    .jqplot-table-legend { background: transparent; color: #c8c8c8; font-size: 14px; font-family: 'Jura'; }
    div.jqplot-table-legend-swatch-outline { border: none; }

  script.
    format_number = function(number, to_fixed = false) {
      if (number == 0 || number == null)
        return '0';

      if (to_fixed)
        number = Number(number).toFixed(to_fixed);
      else
        number = String(number);

      if (String(number).indexOf('.')) {
        return '<b>' + number.replace('.', '</b>.');
      } else {
        return '<b>' + number + '</b>';
      }
    };
    format_hashrate = function(value) {
      if (value == null || value == 0)
        return 0;

      if (value > 1000000000)
        return format_number(value / 1000000000, 2) + ' <b>P</b>H/s';

      if (value > 1000000)
        return format_number(value / 1000000, 2) + ' <b>T</b>H/s';

      if (value > 1000)
        return format_number(value / 1000, 2) + ' <b>G</b>H/s';

      return format_number(value, 2) + ' <b>M</b>H/s';
    };
    add_percentage = function(value, percents) {
        if (percents > 0)
          return value + ' <small>(' + percents + '%)</small>';
        else
          return value;
    };
  script.
    $(document).ready(function(){
      console.log('mining-stats table');
      statsTable = $('#mining-stats-table').dataTable( {
        autoWidth: true,
        searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: false,
        bPaginate: false,
        pageLength: 25,
        //order: [[ 3, "desc" ]],
        ajax: {
          url: 'http://explorer.veles.network/api/stats/mining/hours/24',
          dataSrc: function ( json ) {
            data = []
            i = 0

            for (var key in json) {
              data[i] = {
                'algo': '<big><b>' + key + '</b></big>',
                'hashrate': format_hashrate(json[key]['hashrate']),
                'difficulty': format_number(json[key]['difficulty']),
                'blocks_daily': add_percentage(format_number(json[key]['blocks_daily']), json[key]['blocks_daily_percent']),
                'rewards_daily': format_number(json[key]['rewards_daily'], 8),
                'blocks_hourly': add_percentage(format_number(json[key]['blocks_hourly']), json[key]['blocks_hourly_percent']),
                'rewards_hourly': format_number(json[key]['rewards_hourly'], 8),
                'block_reward_last': format_number(json[key]['block_reward_last'], 8),
                'last_block_index': format_number(json[key]['last_block_index'])
              }
              i++;
            }
            return data;
          }
        },
        columns: [
          { data: 'algo', className: 'text-left' },
          { data: 'hashrate'},
          { data: 'difficulty'},
          { data: 'block_reward_last'},
          { data: 'last_block_index'},
          { data: 'blocks_hourly'},
          { data: 'rewards_hourly'},
          { data: 'blocks_daily'},
          { data: 'rewards_daily'},
      ]
      });
    });
    $(document).ready(function(){
      var initPie = function(url) {
           var daily = [];
           var hourly = [];
           var weekly = [];
           pieChartDaily = null;
           pieChartHourly = null;
           pieChartWeekly = null;

           $.ajax({
            // have to use synchronous here, else the function
            // will return before the data is fetched
            //async: false,
            url: url,
            dataType:"json",
            success: function(data) {
              for (var key in data) { 
                daily.push([key, Number(data[key]['blocks_daily'])]);
                hourly.push([key, Number(data[key]['blocks_hourly'])]);
                weekly.push([key, Number(data[key]['blocks_total'])]);
              }
              pieChartDaily = $.jqplot('pieChartDaily', [daily], {
                //title: "Algos",
                //dataRenderer: ajaxDataRenderer,
                seriesDefaults: {
                    renderer: $.jqplot.PieRenderer,
                    rendererOptions: {
                      diameter: 260,
                      padding: 0,
                      sliceMargin: 4, 
                      // Put data labels on the pie slices.
                      // By default, labels show the percentage of the slice.
                      showDataLabels: true,
                    }
                  },
                  grid: {borderWidth:0, shadow:false, background: 'transparent'},
                  legend: {
                    background: 'transparent',
                    show: true,
                    rendererOptions: {
                        numberRows: 2,
                        border: 'none'
                    },
                    location: 's'
                  }
              });          
              pieChartHourly = $.jqplot('pieChartHourly', [hourly], {
                //title: "Algos",
                //dataRenderer: ajaxDataRenderer,
                seriesDefaults: {
                    renderer: $.jqplot.PieRenderer,
                    rendererOptions: {
                      diameter: 260,
                      padding: 0,
                      sliceMargin: 4, 
                      // Put data labels on the pie slices.
                      // By default, labels show the percentage of the slice.
                      showDataLabels: true,
                    }
                  },
                  grid: {borderWidth:0, shadow:false, background: 'transparent'},
                  legend: {
                    background: 'transparent',
                    show: true,
                    rendererOptions: {
                        numberRows: 2,
                        border: 'none'
                    },
                    location: 's'
                  }
              });          
              pieChartWeekly = $.jqplot('pieChartWeekly', [weekly], {
                //title: "Algos",
                //dataRenderer: ajaxDataRenderer,
                seriesDefaults: {
                    renderer: $.jqplot.PieRenderer,
                    rendererOptions: {
                      diameter: 260,
                      padding: 0,
                      sliceMargin: 4, 
                      // Put data labels on the pie slices.
                      // By default, labels show the percentage of the slice.
                      showDataLabels: true,
                    }
                  },
                  grid: {borderWidth:0, shadow:false, background: 'transparent'},
                  legend: {
                    background: 'transparent',
                    show: true,
                    rendererOptions: {
                        numberRows: 2,
                        border: 'none'
                    },
                    location: 's'
                  }
              });          
            }
          });
      };

      lineCharts = {};
      var initLineChart = function(algo, column, url) {
           var result = [];
           var chart_name = 'lineChart-' + algo + '-' + column;
           lineCharts[chart_name] = null;
           columnStyles = {
             'hashrate': {},
             'difficulty': { color: '#EAA228' }
           }

           $.ajax({
            url: url.replace('{algo}', algo).replace('{column}', column),
            dataType:"json",
            success: function(data) {
              var divider = 1;
              var units = ['H/s', 'kH/s', 'MH/s', 'GH/s', 'TH/s', 'PH/s'];
              var current_unit = 0;

              if (data.length) {
                var value = Number(data[0]);
                while (value > 1000) {
                  value = value / 1000;
                  divider = divider * 1000;
                  current_unit++;
                }
              }

              for (var key in data) { 
                result.push(Number(data[key]) / divider);
              }

              if (!result.length)
                result = [0,0,0,0,0,0,0,0,0,0,0,0];

              if (column == 'hashrate')
                yaxis_options = {
                      min: 0,
                      label: units[current_unit]
                    };
              else {
                divider_pow = Math.pow(divider, 1 / 10).toFixed(0);
                if (divider_pow == 1)
                  yaxis_options = { min: 0, label: 'x1'};
                else
                  yaxis_options = { min: 0, label: 'x10<sup>' + divider_pow + '</sup>'};
              }

              lineCharts[algo + column] = $.jqplot(chart_name, [result], {
                  seriesDefaults: {
                    showMarker: false
                  },
                  series: [columnStyles[column]],
                  axes: {
                    xaxis:{
                      min: 0
                      //label: units[current_unit]
                    },
                    yaxis: yaxis_options
                  },
                  legend: {
                    show: false,
                    rendererOptions: {
                        numberRows: 1,
                        border: 'none'
                    }
                  },
                  grid: {borderWidth:0, shadow:false, background: '#2c2c2c', gridLineColor: '#3c3c3c'}
              });          
            }
          });
      };
      drawPies = function(){
        console.log('redrawing-pies');
        var json_stats_url = 'http://explorer.veles.network/api/stats/mining/hours/168';
        var json_history_url = 'http://explorer.veles.network/api/stats/mining/history/{algo}/{column}/24';
        $('canvas').remove();
        initPie(json_stats_url);
        initLineChart('sha256d', 'hashrate', json_history_url);
        initLineChart('scrypt', 'hashrate', json_history_url);
        initLineChart('lyra2z', 'hashrate', json_history_url);
        initLineChart('x11', 'hashrate', json_history_url);
        initLineChart('x16r', 'hashrate', json_history_url);
        initLineChart('nist5', 'hashrate', json_history_url);
        initLineChart('sha256d', 'difficulty', json_history_url);
        initLineChart('scrypt', 'difficulty', json_history_url);
        initLineChart('lyra2z', 'difficulty', json_history_url);
        initLineChart('x11', 'difficulty', json_history_url);
        initLineChart('x16r', 'difficulty', json_history_url);
        initLineChart('nist5', 'difficulty', json_history_url);
      };

      drawPies();
      // fetch halving information
      drawHalvingTable = function() {
        velesSocketClient.get_cmd_result('node', 'gethalvingstatus', {}, function(data) {
          $('[data-halving-attribute]').each(function(){
            if (data.hasOwnProperty($(this).attr('data-halving-attribute')))
              $(this).text(data[$(this).attr('data-halving-attribute')]);
          });

          $('.halving-data-label').show('quick');
          var lastTargetReached = 0;
          var lastHalvingLength = 0;
          var ep;

          // Clean the old data
          $('#halving-epoch-table').find('tbody').find('tr').remove();

          for (var i = 0; i < data.epochs.length; i++) {
            ep = data.epochs[i];
            $('#halving-epoch-table').append(
              '<tr' + (i == data.epochs.length - 1 ? ' style="color: ' + (ep['supply_target_reached'].replace('%', '') < 80 ? '#5bc0de' : '#8cff8c') + ';"' : '') 
              + (i < 2 ? ' class="grey"' : '') + '>'
              + '<td>' + ep['epoch_name'] + '</td>'
              + '<td>' + ep['max_block_reward'] + '</td>'
              + '<td>' + (ep['started_by_halving'] ? '<b>yes</b>' : 'no') + '</td>'
              + '<td>' + ep['start_block'] + '</td>'
              + '<td>' + (ep['end_block'] ? ep['end_block'] : '-') + '</td>'
              + '<td>' + (ep['end_block'] ? ep['end_block'] - ep['start_block'] + 1 : '-') + '</td>'
              + '<td>' + Math.round(ep['start_supply']) + '</td>'
              + '<td>' + (ep['end_supply'] ? Math.round(ep['end_supply']) : '-') + '</td>'
              + '<td>' + Math.round(ep['supply_this_epoch']) + '</td>'
              + '<td>' + Math.round(ep['supply_since_halving']) + '</td>'
              + '<td>' + (ep['supply_target_reached'].replace('%', '') >= 80 ? '<b>' + ep['supply_target_reached'] + '</b>' : ep['supply_target_reached']) + '</td>'
              + '</tr>'
            );
            lastTargetReached = ep['supply_target_reached'].replace('%', '');
            lastHalvingLength = ep['end_block'] - ep['start_block'] + 1;
          }
          $('#halving-epoch-table').append(
            '<tr><td colspan="11" style="padding: 10px !important;">'
            + '<div class="progbar-outer" style="width: 100%; height: 5px; background-color: #2c2c2c;">'
            + '  <div class="progbar-inner supply-target-progbar" style="width: 0%; height: 5px; background-color: #5bc0de; float: left;"></div>'
            + '</div>'
            + '<span class="supply-progbar-left" style="float: left; font-size: 14px; margin-top: 5px;">'
            + '  <b>' + lastTargetReached + '%</b> of the target has been mined this epoch'
            + '</span>'
            + '<span class="supply-progbar-right" style="float: right; font-size: 14px; margin-top: 5px;">'
            + ' halving requires <b>80%</b> of the target 160 000 VLS'
            + '</span>'
            + '</td></tr>'
          );
          var halvingProggressPercent = data['blocks_to_next_epoch'] ? 100 - (100 / (lastHalvingLength / data['blocks_to_next_epoch'])) : 0;

          $('.supply-target-progbar').css('width', lastTargetReached + '%');
          $('.supply-target-progbar').css('background-color', (lastTargetReached < 80 ? '#5bc0de' : '#8cff8c'));
          $('.halving-progbar').css('width', halvingProggressPercent + '%');
          $('.halving-progbar').css('background-color', (lastTargetReached < 80 ? '#5bc0de' : '#F19B7E'));
          $('.halving-progbar-length-label').text(lastHalvingLength);
          $('.halving-progbar-area').show('slow');
        });
      };
      velesSocketClient.on('connect', drawHalvingTable);
      velesChain.on('chain.tip:state_changed', function(e) {
        drawHalvingTable();
        drawPies();
        statsTable.ajaxStart();
      });
    });
    $(window).resize(function () {
      //pieChartDaily.replot( { resetAxes: true } );
      drawPies();
    });
  .container.dark-color
     h1.mt-4.mb-3#bread-text
        span.grey Mining
        | Statistics 
      .row
        br
      .col-md-12
        .panel.panel-default
          .panel-heading.panel-dashboard
            .header-tile.panel-section
              .tile-label
                | Avg. block reward
                span.tile-label-value(data-entity-id='chain.stats.mining', data-attribute='block_reward_average', data-format='number', data-fixed-decimals='2', data-unit='VLS') 5.00 %
            .header-tile.panel-section
              .tile-label
                | Reward % 
                b PoW
                span.tile-label-value(data-entity-id='chain.stats.mining', data-attribute='block_reward_pow_percent', data-format='number', data-fixed-decimals='2', data-unit='%') 87.00 %
            .header-tile.panel-section
              .tile-label
                | Reward % 
                b MNs
                span.tile-label-value(data-entity-id='chain.stats.mining', data-attribute='block_reward_mn_percent', data-format='number', data-fixed-decimals='2', data-unit='%') 8.00 %
            .header-tile.panel-section
              .tile-label
                | Reward % 
                b Dev 
                | Fund
                span.tile-label-value(data-entity-id='chain.stats.mining', data-attribute='block_reward_dev_percent', data-format='number', data-fixed-decimals='2', data-unit='%') 5.00 %
            div.halving-progbar-area(style="padding: 10px; display: none;")
              div.progbar-outer(style="width: 100%; height: 5px; background-color: #2c2c2c;")
                div.progbar-inner.halving-progbar(style="width: 0%; height: 5px; background-color: #5bc0de; float: left;")
              span.halving-progbar-left(style="float: left; font-size: 14px; margin: 10px;")
                b(data-halving-attribute="blocks_to_next_epoch") ...
                |  blocks left to next block reward halving check
              span.halving-progbar-right(style="float: right; font-size: 14px; margin: 10px;")
                | current halving interval  
                b.halving-progbar-length-label
                |  blocks

          table#mining-stats-table.table.table-bordered.table-striped
            thead
              tr
                th Algo
                th.text-center Hashrate
                th.text-center Difficulty
                th.text-center Last block reward
                th.text-center Last block index
                th.text-center Blocks hourly
                th.text-center Rewards hourly
                th.text-center Blocks daily
                th.text-center Rewards daily
            tbody.text-center        

      .col-md-4
        .panel.panel-default
          .panel-heading
            my1 Blocks Last Hour
          center
            div#pieChartHourly(style="width:300px;height:380px;margin:0px;")

      .col-md-4
        .panel.panel-default
          .panel-heading
            my1 Blocks Last 24 Hours
          center
            div#pieChartDaily(style="width:300px;height:380px;margin:0px;")

      .col-md-4
        .panel.panel-default
          .panel-heading
            my1 Blocks Last Week
          center
            div#pieChartWeekly(style="width:300px;height:380px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Sha256d Hasrate 24h
          center
            div#lineChart-sha256d-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Sha256d Difficulty 24h
          center
            div#lineChart-sha256d-difficulty(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Scrypt Hasrate 24h
          center
            div#lineChart-scrypt-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Scrypt Difficulty 24h
          center
            div#lineChart-scrypt-difficulty(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Lyra2z Hasrate 24h
          center
            div#lineChart-lyra2z-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Lyra2z Difficulty 24h
          center
            div#lineChart-lyra2z-difficulty(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 X11 Hasrate 24h
          center
            div#lineChart-x11-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 X11 Difficulty 24h
          center
            div#lineChart-x11-difficulty(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 X16r Hasrate 24h
          center
            div#lineChart-x16r-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 X16r Difficulty 24h
          center
            div#lineChart-x16r-difficulty(style="width:100%;height:100px;margin:0px;")
            
      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Nist5 Hasrate 24h
          center
            div#lineChart-nist5-hashrate(style="width:100%;height:100px;margin:0px;")

      .col-md-6
        .panel.panel-default
          .panel-heading
            my1 Nist5 Difficulty 24h
          center
            div#lineChart-nist5-difficulty(style="width:100%;height:100px;margin:0px;")
              
      .col-md-12(style="margin-bottom: 5px; margin-top: 20px;")
        center
        .panel.panel-default
          .panel-heading
            my1 Halving Epochs
          table#halving-epoch-table.table.table-bordered.table-striped(style="margin-top:0px;")
            thead
              tr
                th Name
                th.text-center Max Reward
                th.text-center Starts halved
                th.text-center Start Block
                th.text-center End Block
                th.text-center Length Blocks
                th.text-center Start Supply
                th.text-center End Supply
                th.text-center Sup. this epoch
                th.text-center Sup. since halving
                th.text-center Sup. target reached
            tbody.text-center
              tr
                td.table-loading(colspan=11) Loading ...        
          
      .col-md-12
        blockquote.blockquote(style="font-size: 14px;") A 
         b halving epoch 
         | is the time between
         | the start and end of block subsidy halving interval, where maximum block reward is the same for all the blocks 
         | within the epoch. If not enough coins are mined during the epoch, the halving will not occur and the current epoch
         |will repeat again (with the same interval and maximum block reward).
         br
         | Another Veles-specific nature of our halving schedule is that when the halving eventually occurs, 
         | the halving interval, which is the minimal interval between halvings, 
         b increases twofold.

      .col-md-12(style="margin-bottom: 4%")
        center
        .panel.panel-default
          table#halving-epoch-table.table.table-bordered.table-striped
            thead
              tr
                th.text-center(style="min-width: 200px;") Column
                th.text-center Description
            tbody.text-center(style="font-size: 14px;")
              tr
                td Max Reward
                td.text-left Maximum possible number of new coins mined within a single block, the sum of PoW, Masternode and Dev fund reward.
              tr
                td Starts halved
                td.text-left If 'yes', the amount of block reward has been halved at the start of current epoch
              tr
                td Start Block
                td.text-left Height of fist block in the halving epoch
              tr
                td End Block
                td.text-left Height of last block of the epoch
              tr
                td Length Blocks
                td.text-left Length of this epoch in blocks, the halving interval at the time
              tr
                td Start Supply
                td.text-left Total number of coins in circulation before fist block of the epoch
              tr
                td End Supply
                td.text-left Total number of coins in circulation at the last block of the epoch 
              tr
                td Sup
                  span.grey ply
                  | this epoch
                td.text-left Actual number of coins that were released to the circulation during the epoch
              tr
                td Sup
                  span.grey ply
                  | since halving
                td.text-left Actual number of coins that were released to the circulation since the last halving
              tr
                td Sup
                  span.grey ply
                  | target reached
                td.text-left Ratio between the target supply (the supply reached on the optimal hashrate  
                  | if maximal rewards would be awarded for every block) and between the  
                  b Supply since halving 
                  | in percents
